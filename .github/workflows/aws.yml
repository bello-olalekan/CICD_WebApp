name: Deploy to AWS EC2 Instance
# This workflow deploys a Node.js application to an AWS EC2 instance using SSH and SCP. It includes steps for checking out the code, installing dependencies, running tests, building the application, and deploying it to the EC2 instance.
# description: Deploy a Node.js application to AWS EC2 instance using SSH and SCP.
on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        continue-on-error: true  # Optional: Continue even if tests fail
      - name: Build application
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to EC2
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz dist/ node_modules/ package.json package-lock.json

          # Transfer files to EC2
          scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/tmp/

          # Deploy on EC2
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to app directory
            cd /path/to/your/app
            
            # Backup current version (optional)
            timestamp=$(date +%Y%m%d%H%M%S)
            mkdir -p backups
            tar -czf backups/backup_${timestamp}.tar.gz .
            
            # Extract new version
            tar -xzf /tmp/deploy.tar.gz -C .
            
            # Install production dependencies (if needed)
            # npm ci --only=production
            
            # Restart your Node.js application
            pm2 restart app || pm2 start npm --name "app" -- start
            
            # Clean up
            rm /tmp/deploy.tar.gz
          EOF